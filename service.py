import os

from aiogram.client.session import aiohttp
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from openai import OpenAI

from keyboards import start_kb, confirm_keyboard
from states import Survey
from db import db

load_dotenv()

OPENAI_API_KEY=os.getenv('OPENAI_API_KEY')
WEATHER_API_KEY=os.getenv('WEATHER_API_KEY')

# client = OpenAI(api_key=OPENAI_API_KEY)

# async def chat_with_openai(message: Message):
#     try:
#         response = client.chat.completions.create(
#             model="gpt-4o",
#             messages=[{"role": "user",
#                        "content": message.text
#                        },
#                       {
#                           "role": "system",
#                           "content": "–¢—ã –º–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏"
#                                      "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–≥—É—é —Ç–µ–º—É , –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏."
#                       }
#                       ],
#         )
#         reply_text = response.choices[0].message.content
#         await message.answer(reply_text)
#     except Exception as e:
#         print(e)



async def chat_with_ai(message: Message):
    try:
        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=f"{OPENAI_API_KEY}",
        )

        completion = client.chat.completions.create(
            model="google/gemma-2-9b-it:free",
            temperature=1,
            messages=[
                    {
                        "role": "user",
                        "content": message.text
                    },
                    {
                      "role": "system",
                      "content": "–¢—ã –º–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –¢–≤–æ—è —Ä–æ–ª—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —á—É—Ç—å –Ω–∏–∂–µ —è —Ç–µ–±–µ –Ω–∞–ø–∏—à—É –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—Ç, "
                                 "–µ—Å–ª–∏ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö"
                                 "–í–æ–ø—Ä–æ—Å—ã –∏ –û—Ç–≤–µ—Ç—ã –ø—Ä–æ –Ω–∞—à –∫–ª–∞—Å—Å:"
                                 "–ú–µ–Ω—Ç–æ—Ä - –î–∞—Å—Ç–∞–Ω"
                                 "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ - –°–∞–±–∏–Ω–∞"
                                 "–í –∫–ª–∞—Å—Å–µ 14 —É—á–µ–Ω–∏–∫–æ–≤. "
                                 "–®–∫–æ–ª–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É –≥–æ—Ä–æ–¥ –ë–∏—à–∫–µ–∫ 7–π –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –¥–æ–º 26"
                                 "–í –∫–ª–∞—Å—Å–µ –µ—Å—Ç—å –¥–≤–æ–µ—á–Ω–∏–∫–∏ –ú–∏—Ä–∏—Å–ª–∞–º, –ú–∏—Ä–æ—Å–ª–∞–≤, –¢–∏–º—É—Ä, –ù—É—Ä–∏—Å–ª–∞–º, –ê–º–∏—Ä, –ú–µ–ª–∏–Ω–∞, –ñ–∞–Ω–Ω–∞—Ç"
                                 "–û—Ç–ª–∏—á–Ω–∏–∫ –ú–∞–∫–∞—Ä, –ù—É—Ä–µ–ª—å"
                                 "–£—á–µ–Ω–∏–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Ç—Å—è –Ω–∞ 4: –ê–ª—Ç—ã–Ω–∞–π, –ù–∏–∫–∏—Ç–∞, –ê—Ä–∏–µ—Ç, –ê–≥–∞—Ö–∞–Ω"
                                 "–ë–æ–ª—å—à–µ –≤—Å–µ—Ö –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç - –ú–µ–ª–∏–Ω–∞, –ñ–∞–Ω–Ω–∞—Ç"
                                 "–ë–æ–ª—å—à–µ –≤—Å–µ—Ö –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±–æ–ª–µ–µ—Ç - –ú–∏—Ä–∏—Å–ª–∞–º"
                                 "–°–∞–º—ã–π –∫—Ä–∞—Å–∏–≤—ã–π –∏ —É–º–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –≥—Ä—É–ø–ø–µ - –ú–µ–Ω—Ç–æ—Ä"
                                 "–ë–ª–∏–∂–∞–π—à–µ–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ 30 –º–∞—Ä—Ç–∞ –≤ 19 00"
                  }
                ]
            )
        reply_text = completion.choices[0].message.content
        await message.answer(reply_text)
    except Exception as e:
        print(e)



async def survey_text_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç")
    await state.set_state(Survey.age)


async def survey_age_handler(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–ö–∞–∫–æ–µ –≤–∞—à–µ —Ö–æ–±–±–∏?")
    await state.set_state(Survey.hobby)


async def survey_hobby_handler(message: Message, state: FSMContext):
    user_id = await db.check_user(message.chat.id)
    data = await state.get_data()
    name = data.get("name")
    age = data.get("age")
    hobby = message.text
    await message.answer(
        f"CONGRATS {name}!\n You are {age} years old!\n Your hobby is {hobby}"
    )
    await db.add_survey_results(user_id['id'], name, age, hobby)
    await state.clear()


async def main_survey_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == Survey.name:
        await survey_text_handler(message, state)
    elif current_state == Survey.age:
        await survey_age_handler(message, state)
    elif current_state == Survey.hobby:
        await survey_hobby_handler(message, state)


async def text_handler(message: Message):
    if message.text == "üí° –ö–∞—Ä—Ç–∏–Ω–∫–∞":
        pass
        # –ó–¥–µ—Å—å –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    elif message.text == "üèû –ü–æ–≥–æ–¥–∞":
        weather = await get_weather()
        await message.answer(weather)
    elif message.text == "üèû Muhammad":
        await message.answer_sticker("CAACAgIAAxkBAANEZ7xbsCWHc5rtPTJT8Sr-VjpUW6UAAj4AAwzfKCycoDBeXCS3DzYE")
    elif message.text == "show_kb":
        await message.answer(
            text=(
                f'üî• –í—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏\n\n'
                f'–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá\n\n'
            ),
            reply_markup=start_kb)
    elif message.text == "inline_kb":
        await message.answer(
            text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ email?",
            reply_markup=confirm_keyboard
        )
    else:
        # –ó–¥–µ—Å—å –∏–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã—Ç–∞—Å–∫–∏–≤–µ—Ç –∏–∑ –±–¥ –ª—é–±–∏–º—É—é —Ç–µ–º—É —é–∑–µ—Ä–∞
        # prompt = –ó–¥–µ—Å—å –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–º—É —é–∑–µ—Ä–∞
        await chat_with_ai(message)


async def get_weather():
    url = f"https://api.openweathermap.org/data/2.5/weather?q=–ë–∏—à–∫–µ–∫&appid={WEATHER_API_KEY}&units=metric"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                type_ = data["weather"][0]["main"]
                temp_c = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                city = data["name"]
                return f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:{type_}\n –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:{temp_c}\n –ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫:{feels_like}"
            else:
                return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

